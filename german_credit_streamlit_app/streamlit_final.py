# -*- coding: utf-8 -*-
"""streamlit_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10hY3-E-vnVGu3myIdYUX0XM8tmojmxCF
"""

from catboost import CatBoostClassifier
import streamlit as st
import pandas as pd
import numpy as np

#Loading up the Regression model we created
#cat_cols = ['Checking_acct_status', 'Credit_history', 'Purpose', 'Savings', 'Years_employed', 'Installment_rate', 'Debtors', 'Residence', 
 #           'Property', 'Other_installment_plans', 'Housing', 'No_existing_credits', 'Job', 'Dependants', 'Telephone', 'Foreign_worker'] 


classifier = CatBoostClassifier() #cat_features=cat_cols
classifier.load_model('catboost_model.json')

def make_predictions_proba(model, X_valid, threshold):
    y_pred = (model.predict_proba(X_valid) > threshold).astype(int)[:, 1]
    return y_pred

#Caching the model for faster loading
@st.cache_data


# Define the prediction function
def predict(Checking_acct_status, Duration_months, Credit_history, Purpose, Credit_amount,
           Savings, Years_employed, Installment_rate, Status, Debtors, Residence, Property,
           Age, Other_installment_plans, Housing, No_existing_credits, Job, Dependants,
           Telephone, Foreign_worker):
    # Map categorical variables to numerical values
    existing_checking_account_map = {
        "... < 0 DM": 0,
        "0 <= ... < 200 DM": 1,
        "... >= 200 DM / salary assignments for at least 1 year": 2,
        "no checking account": 3}
    Checking_acct_status = existing_checking_account_map[Checking_acct_status]

    Credit_history_map = {
        "no credits taken/ all credits paid back duly": 0,
        "all credits at this bank paid back duly": 1,
        "existing credits paid back duly till now": 2,
        "delay in paying off in the past": 3,
        "critical account/ other credits existing (not at this bank)": 4}
    Credit_history = Credit_history_map[Credit_history]

    purpose_map = {
        "car (new)": 0,
        "car (used)": 1,
        "furniture/equipment": 2,
        "radio/television": 3,
        "domestic appliances": 4,
        "repairs": 5,
        "education": 6,
        "(vacation - does not exist?)": 7,
        "retraining": 8,
        "business": 9,
        "others": 10}
    Purpose = purpose_map[Purpose]

    savings_account_bonds_map = {
        "... < 100 DM": 0,
        "100 <= ... < 500 DM": 1,
        "500 <= ... < 1000 DM": 2,
        ".. >= 1000 DM": 3,
        "unknown/ no savings account": 4}
    Savings = savings_account_bonds_map[Savings]

    present_employment_since_map = {
        "unemployed": 0,
        "... < 1 year": 1,
        "1 <= ... < 4 years": 2,
        "4 <= ... < 7 years": 3,
        ".. >= 7 years": 4}
    Years_employed = present_employment_since_map[Years_employed]    

    personal_status_and_sex_map = {
        "male : divorced/separated": 0,
        "female : divorced/separated/married": 1,
        "male : single": 2,
        "male : married/widowed": 3,
        "female : single": 4}
    Status = personal_status_and_sex_map[Status]

    other_debtors_guarantors_map = {
        "none": 0,
        "co-applicant": 1,
        "guarantor": 2}
    Debtors = other_debtors_guarantors_map[Debtors]        

    property_map = {
        "real estate": 0,
        "building society savings agreement/ life insurance": 1,
        "car or other, not in attribute 6": 2,
        "unknown / no property": 3}
    Property = property_map[Property]    

    other_installment_plans_map = {
        "bank": 0,
        "stores": 1,
        "none": 2}
    Other_installment_plans = other_installment_plans_map[Other_installment_plans]    

    housing_map = {
        "rent": 0,
        "own": 1,
        "for free": 2}
    Housing = housing_map[Housing]

    job_map = {
        "unemployed/ unskilled - non-resident": 0,
        "unskilled": 1,
        "skilled employee / official": 2,
        "management/ self-employed/ highly qualified employee/ officer": 3}
    Job = job_map[Job]        

    Telephone_map = {
        "none" : 0, 
        "yes, registered under the customers name" : 1}
    Telephone = Telephone_map[Telephone]

    foreign_worker_map = {
        "yes" : 0, 
        "no" : 1}
    Foreign_worker = foreign_worker_map[Foreign_worker]

    # Create input array
    input_data = np.array([[Checking_acct_status, Duration_months, Credit_history, Purpose, Credit_amount,
           Savings, Years_employed, Installment_rate, Status, Debtors, Residence, Property,
           Age, Other_installment_plans, Housing, No_existing_credits, Job, Dependants,
           Telephone, Foreign_worker]])

    #prediction = classifier.predict(input_data)
    prediction = make_predictions_proba(classifier, input_data, 0.242)
    return prediction[0]

st.title('German Credit Risk Prediction')
st.image("""https://cdn.educba.com/academy/wp-content/uploads/2021/02/Credit-Risk.jpg""")
st.header('Enter Customer Details:')

Checking_acct_status = st.selectbox('Checking Account Status', ["... < 0 DM", "0 <= ... < 200 DM", "... >= 200 DM / salary assignments for at least 1 year", "no checking account"])
Duration_months = st.slider('Duration of Credit (Months)', 4, 72, 24)
Credit_history = st.selectbox('Credit History', ["no credits taken/ all credits paid back duly", "all credits at this bank paid back duly", "existing credits paid back duly till now",  "delay in paying off in the past",  "critical account/ other credits existing (not at this bank)"])
Purpose = st.selectbox('Purpose', ["car (new)",  "car (used)", "furniture/equipment", "radio/television", "domestic appliances",  "repairs",  "education", "(vacation - does not exist?)",  "retraining", "business", "others"])
Credit_amount = st.number_input('Credit Amount', min_value=0, max_value=20000, value=10000, step=100)
Savings = st.selectbox('Savings Account', ["... < 100 DM",  "100 <= ... < 500 DM",  "500 <= ... < 1000 DM",  ".. >= 1000 DM", "unknown/ no savings account"])
Years_employed = st.selectbox('Employment Since', ["unemployed",  "... < 1 year",  "1 <= ... < 4 years",  "4 <= ... < 7 years",  ".. >= 7 years"])
Installment_rate = st.slider('Installment Rate in Percentage', 1, 4, 2)
Status = st.selectbox('Status and Sex', ["male : divorced/separated", "female : divorced/separated/married",  "male : single", "male : married/widowed",  "female : single"])
Debtors = st.selectbox('Other Debtors', ["none",  "co-applicant", "guarantor"])
Residence = st.slider('Duration in Current Residence', 1, 4, 2)
Property = st.selectbox('Property state', ["real estate",  "building society savings agreement/ life insurance", "car or other, not in attribute 6", "unknown / no property"])
Age = st.slider('Age (Years)', 18, 70, 30)
Other_installment_plans = st.selectbox('Other Installment Plans', ["bank", "stores", "none"])
Housing = st.selectbox('Housing', ["rent", "own", "for free"])
No_existing_credits = st.slider('Number of Existing Credits at this Bank', 1, 4, 2)
Job = st.selectbox('Job', ["unemployed/ unskilled - non-resident", "unskilled" , "skilled employee / official", "management/ self-employed/ highly qualified employee/ officer"])
Dependants = st.slider('Number of Dependents', 1, 2, 1)
Telephone = st.selectbox('Telephone', ["none", "yes, registered under the customers name"])
Foreign_worker = st.selectbox('Foreign Worker', ["yes", "no"])

if st.button('Predict risk'):
    risk_result = predict(Checking_acct_status, Duration_months, Credit_history, Purpose, Credit_amount,
           Savings, Years_employed, Installment_rate, Status, Debtors, Residence, Property,
           Age, Other_installment_plans, Housing, No_existing_credits, Job, Dependants,
           Telephone, Foreign_worker)
    #st.success(f'The predicted price of the diamond is ${price[0]:.2f} USD')
    if risk_result == 0:
        st.write('Good credit risk')
    elif risk_result == 1:
        st.write('Bad credit risk')
    else:
      st.write('Error')

